image: docker:latest

services:
  - name: docker:dind
    alias: docker
    command: ["--tls=false"]


stages:
  - build
  - deploy

variables:
  DOCKER_REGISTRY: 042958272654.dkr.ecr.us-east-2.amazonaws.com
  APP_NAME: ""
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_NETWORK_OPTIONS: --dns 8.8.8.8


.template_docker_login:
  image: docker:latest
  services:
    - docker:dind  


build-image-dev:
  stage: build
  variables:
    DOCKER_REGISTRY: 724772066880.dkr.ecr.eu-west-1.amazonaws.com
    APP_NAME: demo-agent-app
  image: 
    name: amazon/aws-cli
    entrypoint: [""]
  services:
    - name: docker:dind 
      command: ["--tls=false"] 
  extends: .template_docker_login
  before_script:
    #- amazon-linux-extras install docker  # Install Docker in amazon/aws-cli
    - docker --version
    - aws --version
  script:
    - unset DOCKER_HOST
    - aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin $DOCKER_REGISTRY
    - docker build  -t agent/nodejs/${CI_COMMIT_REF_NAME}:latest .
    # - docker tag agent/nodejs/${CI_COMMIT_REF_NAME}:latest  $DOCKER_REGISTRY/$APP_NAME:${CI_PIPELINE_IID}
    # - docker push   $DOCKER_REGISTRY/$APP_NAME:${CI_PIPELINE_IID}
    - docker tag agent/nodejs/${CI_COMMIT_REF_NAME}:latest  $DOCKER_REGISTRY/$APP_NAME:latest
    - docker push   $DOCKER_REGISTRY/$APP_NAME:latest
    - docker logout

  #after_script:
   # - docker system prune -af  --filter "until=$((24))h" --filter "label=scope=agent-${CI_COMMIT_REF_NAME}-${APP_NAME}"  
  environment: development  
  #when: manual
  rules:
    - if:  '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "dev" '
      exists:
        - Dockerfile
